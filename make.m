function make(varargin)
%MAKE: compile the MATLAB Basler Camera Driver
% 19.04.2015 / Hannes Badertscher
% Usage:
%          make            Compiles the driver
%          make clean      Removes all autogenerated files
%

%% Paths of both Boost libs and Pylon 6 (watch out for the last backslash \)
BOOST_ROOT = 'C:\local\boost_1_77_0\';
PYLON_DEV_ROOT = 'C:\Program Files\Basler\pylon 6\Development\';

%% Path to source files
SRC = 'src\';

%% Files to build
% Driver functions
drivers = fullfile(SRC, {                             ...
            'baslerFindCameras.cpp';    ...
            'baslerSetParameter.cpp';   ...
            'baslerGetParameter.cpp';   ...
            'baslerGetData.cpp';        ...
            'baslerSaveData.cpp';       ...
          });

% Shared libraries:             path                    additional flags
libraries = {  [SRC 'basler_helper\basler_set_get.cpp']    , '-c',  ['-outdir ' SRC 'basler_helper']   ...
               [SRC 'private\baslerGetRawCameraParams.cpp'], '';        ...
            };

libraryObjects = [SRC 'basler_helper\basler_set_get.obj'];

% MEX and compiler flags
flags = {   '-largeArrayDims',...
            'COMPFLAGS="$COMPFLAGS -Wall"', ...
            ... '-g', ...      % debug symbols
            ... '-v', ...      % verbose
        };

%% Additional Paths
% Boost include and libs paths
iboost = ['-I' BOOST_ROOT];
lboost = ['-L' BOOST_ROOT 'lib64-msvc-14.2'];

% pylon6 include and libs paths
ipylon = ['-I' PYLON_DEV_ROOT 'include\'];
lpylon = ['-L' PYLON_DEV_ROOT 'lib\x64\'];

%% Build!
switch nargin
    case 0 % BUILD

        % Build libraries
        fprintf('=> Creating Libraries\n');
        for k=1:height(libraries)
%             cd(libraries{k,1})
            mex(flags{:}, libraries{k,2}, ipylon, lpylon, libraries{k,1})   % build
%             cd('..');
        end

        % Build drivers
        fprintf('=> Creating Functions\n');
        for k=1:size(drivers,1)
            mex(flags{:}, libraryObjects, drivers{k}, ipylon, lpylon, iboost, lboost, '-outdir release')
        end
        
    case 1 %CLEAN
        if strcmp(varargin{1},'clean')
            dirsToClean = {
                'src\basler_helper';    ...
                'release'               ...
            };
            delete('*.pdb','*.mex*','*.obj','*.lib','*.exp');
            for k=1:height(dirsToClean)
                old = cd(dirsToClean{k});
                delete('*.pdb','*.mex*','*.obj','*.lib','*.exp');
                cd(old);
            end
        end
        
    otherwise %DO NOTHING!

end
    
end